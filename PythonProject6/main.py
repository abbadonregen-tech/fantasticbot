import os
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import random
import datetime
import asyncio
import logging

# =============================================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò - –ó–ê–ú–ï–ù–ò –ó–î–ï–°–¨ –°–í–û–ò –î–ê–ù–ù–´–ï!
# =============================================

# üîë –ó–ê–ú–ï–ù–ò 'YOUR_BOT_TOKEN_HERE' –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8240936265:AAEOVHklnIPXT1N7bMgQ6ZVvrg9CB9TRM5o')

# üë§ –ó–ê–ú–ï–ù–ò 5234287314 –Ω–∞ —Å–≤–æ–π Telegram ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —É @userinfobot)
ADMIN_ID = int(os.environ.get('ADMIN_ID', '8240351121'))

# =============================================
# üöÄ –û–°–ù–û–í–ù–û–ô –ö–û–î (–ù–ï –ú–ï–ù–Ø–ô)
# =============================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_required_files():
    required_files = {
        'welcome.txt': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        'namebot.txt': '–ú–æ–π –ë–æ—Ç',
        'photomenu.txt': 'https://t.me/paraIiza/4',
        'fast.txt': '–ü—Ä–∏–≤–µ—Ç!\n–ö–∞–∫ –¥–µ–ª–∞?\n–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?'
    }

    for filename, content in required_files.items():
        if not os.path.exists(filename):
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)


# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_required_files()

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
sh = []
state = []
pined_chats = []
usersat = []
chatsat = []
chats = []
chatsp = []
chatsv = []
time = []
timeat = []

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(BOT_TOKEN).build()


# –ö–æ–º–∞–Ω–¥—ã
async def start_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        ad = await context.bot.get_chat(ADMIN_ID)
        m = ReplyKeyboardMarkup(
            [
                [
                    KeyboardButton(text='Help‚úû'),
                    KeyboardButton(text='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫‚úû'),
                    KeyboardButton(text='–®–∞–±–ª–æ–Ω—ã‚úû')
                ]
            ], resize_keyboard=True
        )
        name = ad.first_name
        await context.bot.send_photo(
            ADMIN_ID,
            photo='https://t.me/paraIiza/4',
            caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Å—Ç–æ –≥–¥–µ —Ç–µ–±—è –ø–æ—Ö–æ—Ä–æ–Ω—è—Ç, {name}‚úû',
            reply_markup=m
        )


async def off_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text('–©–∞')
        if context.args:
            try:
                chat = int(context.args[0])
                if chat in chats:
                    chats.remove(chat)
                await update.message.reply_text("–í—Å–µ")
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def offv_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text('–©–∞')
        if context.args:
            try:
                chat = int(context.args[0])
                if chat in chatsv:
                    chatsv.remove(chat)
                await update.message.reply_text("–í—Å–µ")
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def offp_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text('–©–∞')
        if context.args:
            try:
                chat = int(context.args[0])
                if chat in chatsp:
                    chatsp.remove(chat)
                await update.message.reply_text("–í—Å–µ")
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def timea_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        time.clear()
        if context.args:
            try:
                chat = int(context.args[0])
                time.append(chat)
                await update.message.reply_text(f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞:</b><code>{context.args[0]}</code>',
                                                parse_mode='HTML')
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")


async def settingsa_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        helptxt = (
            '\n‚úû /timea + time <b>- –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>'
            '\n‚úû /shap + text <b>- —à–∞–ø–∫–∞ –Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>'
            '\n‚úû /use + user id <b>- –¥–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞</b>'
            '\n‚úû /dob ( –ø—Ä–æ–ø–∏—à–∏ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ) <b>- –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Å—å —á–∞—Ç –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>'
        )
        await update.message.reply_text(helptxt, parse_mode='HTML')


async def shap_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        sh.clear()
        url = ' '.join(context.args)
        sh.append(url)
        await update.message.reply_text(f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–µ</b>:<code>{url}</code>',
                                        parse_mode='HTML')


async def dob_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        user = update.effective_chat.id
        chatsat.append(user)
        await update.message.reply_text('–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞\n –ß—Ç–æ–±—ã –≤—ã—Ä—É–±–∏—Ç—å <code>/dbb</code>',
                                        parse_mode='HTML')


async def dbb_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        user = update.effective_chat.id
        if user in chatsat:
            chatsat.remove(user)
        await update.message.reply_text('deleted.')


async def uss_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if context.args:
            try:
                user = int(context.args[0])
                if user in usersat:
                    usersat.remove(user)
                await update.message.reply_text('deleted.')
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


async def use_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if context.args:
            try:
                user = int(context.args[0])
                usersat.append(user)
                await update.message.reply_text(
                    f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞\n –ß—Ç–æ–±—ã –≤—ã—Ä—É–±–∏—Ç—å <code>/uss {user}</code>', parse_mode='HTML')
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


async def timeat_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        timeat.clear()
        if context.args:
            try:
                chat = int(context.args[0])
                timeat.append(chat)
                await update.message.reply_text(
                    f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–µ:</b><code>{context.args[0]}</code>', parse_mode='HTML')
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")


async def ras_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        text = (
            '/pin + chat id + time + text message - <b>–ø–∏–Ω–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ñ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ (–Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞)</b>'
            '\n/welcome + text - <b>–º–µ–Ω—è–µ—Ç –≤–∞—à–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>'
            '\n/namea + text - <b>–º–µ–Ω—è–µ—Ç –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞</b>'
        )
        await update.message.reply_text(text, parse_mode='HTML')


async def welcome_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        text = ' '.join(context.args)
        with open('welcome.txt', 'w', encoding='utf-8') as f:
            f.write(text)
        await update.message.reply_text(f'Text to welcome: {text}')


async def namea_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        text = ' '.join(context.args)
        with open('namebot.txt', 'w', encoding='utf-8') as f:
            f.write(text)
        await update.message.reply_text(f'NameBot: {text}')


async def pin_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if len(context.args) >= 2:
            try:
                chat = int(context.args[0])
                delay = int(context.args[1])
                text_message = ' '.join(context.args[2:])
                pined_chats.append(chat)
                await update.message.reply_text(f'For off: <code>/poff {chat}</code>', parse_mode='HTML')

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(pin_loop(context.bot, chat, delay, text_message))
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏")


async def pin_loop(bot, chat, delay, text_message):
    while chat in pined_chats:
        try:
            message = await bot.send_message(chat, text_message)
            await bot.pin_chat_message(chat, message.message_id)
            await asyncio.sleep(delay)
        except Exception as e:
            print(f"Error in pin_loop: {e}")
            await asyncio.sleep(delay)


async def poff_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if context.args:
            try:
                chat = int(context.args[0])
                if chat in pined_chats:
                    pined_chats.remove(chat)
                    await update.message.reply_text('Deleted.')
                else:
                    await update.message.reply_text('Chat dont appended to list... Clown.')
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def help_button(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if update.message.text == 'Help‚úû':
            try:
                name = open('namebot.txt', 'r', encoding='utf-8').readline()
            except:
                name = "–ú–æ–π –ë–æ—Ç"

            try:
                url = open('photomenu.txt', 'r').readline()
            except:
                url = 'https://t.me/paraIiza/4'

            helptxt = (
                f'{name} help:'
                '\n‚úû /prl <b>+ chat id + –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.txt + –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>'
                '\n‚úû /prlz <b>chat id + –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.txt + —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ + –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>'
                '\n‚úû /prlzz <b>–í—Å–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ –≤–∏–¥–µ–æ, –Ω–æ —Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Ñ–æ—Ç–æ</b>'
                '\n‚úû /id <b>–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ —á–∞—Ç–∞</b>'
                '\n‚úû /fast <b>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é</b>'
                '\n‚úû /timef + time <b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>'
                '\n‚úû /settingsa + time <b>–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞</b>'
                '\n‚úû /ras - <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>'
                '\n‚úû <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " —à–∞–±–ª–æ–Ω—ã " —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π </b> <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º ( –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ )</b>'
                '\n‚úû <b>!!!</b> <i>–ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–∫ –±–æ—Ç—É –∏ –æ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç –µ–≥–æ –∫ —Å–µ–±–µ</i>'
                '\n‚úû <b>!!!</b> <i>–ù–∞–∂–º–∏—Ç–µ /start –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏</i> '
            )
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=url,
                caption=helptxt,
                parse_mode='HTML'
            )


async def templates_button(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID and update.message.text == '–®–∞–±–ª–æ–Ω—ã‚úû':
        try:
            await context.bot.send_message(ADMIN_ID, '–©–∞ —Å–∫–∏–Ω—É')
            ls = os.listdir()
            info = '<code>' + '\n\n'.join([str(elem) for elem in ls]) + "</code>"

            if len(info) > 4096:
                for x in range(0, len(info), 4096):
                    await context.bot.send_message(ADMIN_ID, info[x:x + 4096], parse_mode='HTML')
            else:
                await context.bot.send_message(ADMIN_ID, info, parse_mode='HTML')
        except Exception as e:
            await context.bot.send_message(ADMIN_ID, f'–û—à–∏–±–∫–∞: {e}')


async def developer_button(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID and update.message.text == '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫‚úû':
        await context.bot.send_photo(
            ADMIN_ID,
            'https://t.me/paraIiza/4',
            '–ë–æ–≥–æ–ø–æ–¥–æ–±–Ω—ã–π [Paralizator](https://t.me/paraIizator) \n –õ—É—á—à–∏–µ –±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —É –Ω–µ–≥–æ',
            parse_mode='Markdown'
        )


async def id_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        chat_id = update.effective_chat.id
        await context.bot.send_message(update.effective_chat.id, f'‚úû<b>CHAT ID:</b> <code>{chat_id}</code>',
                                       parse_mode='HTML')


async def prl_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if len(context.args) >= 2:
            try:
                chat = int(context.args[0])
                sh = context.args[1]
                ob = ' '.join(context.args[2:])

                chats.append(chat)
                await context.bot.send_message(ADMIN_ID, f'–ó–∞–ø—É—â–µ–Ω!\n–ß—Ç–æ–±—ã –≤—ã—Ä—É–±–∏—Ç—å <code>/off {chat}</code>',
                                               parse_mode='HTML')

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(prl_loop(context.bot, chat, sh, ob))
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def prl_loop(bot, chat, sh, ob):
    while chat in chats:
        try:
            with open(f'{sh}', 'r', encoding='utf-8') as f:
                a = f.read()
                b = a.split('\n')
                if ob:
                    await bot.send_message(chat, str(ob + random.choice(b)))
                else:
                    await bot.send_message(chat, random.choice(b))

                if time:
                    await asyncio.sleep(int(time[0]))
                else:
                    await asyncio.sleep(1)
        except Exception as e:
            print(f"Error in prl_loop: {e}")
            if time:
                await asyncio.sleep(int(time[0]))
            else:
                await asyncio.sleep(1)


async def prlz_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if len(context.args) >= 3:
            try:
                chat = int(context.args[0])
                sh = context.args[1]
                vid = context.args[2]
                ob = ' '.join(context.args[3:])

                chatsv.append(chat)
                await update.message.reply_text(f'–ó–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –≤—ã—Ä—É–±–∏—Ç—å <code>/offv {chat}</code>', parse_mode='HTML')

                asyncio.create_task(prlz_loop(context.bot, chat, sh, vid, ob))
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def prlz_loop(bot, chat, sh, vid, ob):
    while chat in chatsv:
        try:
            with open(f'{sh}', 'r', encoding='utf-8') as f:
                a = f.read()
                b = a.split('\n')
                await bot.send_video(chat, video=vid, caption=(ob + random.choice(b)))

                if time:
                    await asyncio.sleep(int(time[0]))
                else:
                    await asyncio.sleep(1)
        except Exception as e:
            print(f"Error in prlz_loop: {e}")
            if time:
                await asyncio.sleep(int(time[0]))
            else:
                await asyncio.sleep(1)


async def prlzz_command(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        if len(context.args) >= 3:
            try:
                chat = int(context.args[0])
                sh = context.args[1]
                photo = context.args[2]
                ob = ' '.join(context.args[3:])

                chatsp.append(chat)
                await update.message.reply_text(f'–ó–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –≤—ã—Ä—É–±–∏—Ç—å <code>/offp {chat}</code>', parse_mode='HTML')

                asyncio.create_task(prlzz_loop(context.bot, chat, sh, photo, ob))
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")


async def prlzz_loop(bot, chat, sh, photo, ob):
    while chat in chatsp:
        try:
            with open(f'{sh}', 'r', encoding='utf-8') as f:
                a = f.read()
                b = a.split('\n')
                await bot.send_photo(chat, photo=photo, caption=(ob + random.choice(b)))

                if time:
                    await asyncio.sleep(int(time[0]))
                else:
                    await asyncio.sleep(1)
        except Exception as e:
            print(f"Error in prlzz_loop: {e}")
            if time:
                await asyncio.sleep(int(time[0]))
            else:
                await asyncio.sleep(1)


async def new_chat_members(update: Update, context: CallbackContext):
    if update.message.new_chat_members:
        mes = update.effective_chat
        ids = mes.id
        try:
            text = open('welcome.txt', 'r', encoding='utf-8').readline()
        except:
            text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"

        text1 = f'{text} {os.name} \nID: <code>{ids}</code>\nChat title: <code>{mes.title}</code>'
        await asyncio.sleep(1)

        try:
            photo = open('photomenu.txt', 'r').read()
        except:
            photo = 'https://t.me/paraIiza/4'

        await context.bot.send_photo(update.effective_chat.id, photo=photo, caption=text1, parse_mode='HTML')


async def document_handler(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        try:
            msg = await context.bot.send_message(update.effective_user.id, "–°–∫–∞—á–∏–≤–∞—é...")
            file_id = update.message.document.file_id
            file = await context.bot.get_file(file_id)

            await file.download_to_drive(update.message.document.file_name)
            await context.bot.edit_message_text('–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª ‚úÖ', update.effective_chat.id, msg.message_id)
        except Exception as e:
            await context.bot.send_message(update.effective_user.id, f"–û—à–∏–±–∫–∞: {e}")


async def auto_reply(update: Update, context: CallbackContext):
    if (update.effective_user.id in usersat) or (
            update.effective_chat.id in chatsat and update.effective_user.id != ADMIN_ID):
        if timeat:
            await asyncio.sleep(int(timeat[0]))
        try:
            with open('fast.txt', 'r', encoding='utf-8') as f:
                a = f.read()
                a = a.split('\n')
                if sh:
                    await update.message.reply_text(str(sh[0] + random.choice(a)))
                else:
                    await update.message.reply_text(random.choice(a))
        except Exception as e:
            print(f"Auto-reply error: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def setup_handlers(app):
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("off", off_command))
    app.add_handler(CommandHandler("offv", offv_command))
    app.add_handler(CommandHandler("offp", offp_command))
    app.add_handler(CommandHandler("timea", timea_command))
    app.add_handler(CommandHandler("settingsa", settingsa_command))
    app.add_handler(CommandHandler("shap", shap_command))
    app.add_handler(CommandHandler("dob", dob_command))
    app.add_handler(CommandHandler("dbb", dbb_command))
    app.add_handler(CommandHandler("uss", uss_command))
    app.add_handler(CommandHandler("use", use_command))
    app.add_handler(CommandHandler("timeat", timeat_command))
    app.add_handler(CommandHandler("ras", ras_command))
    app.add_handler(CommandHandler("welcome", welcome_command))
    app.add_handler(CommandHandler("namea", namea_command))
    app.add_handler(CommandHandler("pin", pin_command))
    app.add_handler(CommandHandler("poff", poff_command))
    app.add_handler(CommandHandler("id", id_command))
    app.add_handler(CommandHandler("prl", prl_command))
    app.add_handler(CommandHandler("prlz", prlz_command))
    app.add_handler(CommandHandler("prlzz", prlzz_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^Help‚úû$'), help_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–®–∞–±–ª–æ–Ω—ã‚úû$'), templates_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫‚úû$'), developer_button))
    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_members))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, auto_reply))


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...")
    print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN}")
    print(f"üë§ –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    setup_handlers(application)
    application.run_polling()